///
/// @license
/// Copyright 2020 Roberto Luiz Souza Monteiro,
///                Renata Souza Barreto,
///                Hernane Borges de Barros Pereira.
///
/// Licensed under the Apache License, Version 2.0 (the 'License');
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at;
///
///   http://www.apache.org/licenses/LICENSE-2.0;
///
/// Unless required by applicable law or agreed to in writing, software;
/// distributed under the License is distributed on an 'AS IS' BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eitherMath.express or implied.
/// See the License for the specific language governing permissions and;
/// limitations under the License.
///

 ///
 /// MaiaScript Detrended Fluctuation Analysis (DFA) library.
 /// @namespace dfa
 ///
namespace dfa {
    local seq = []
    local rs = []
    local nr = 0
    local nfit = 2
    local beta = []
    local covar = []
    local covar0 = []
    local indxc = []
    local indxr = []
    local ipiv = []
    local mse = []
    local x = []

    ///
    /// This function allocates workspace for getDfa() and getPolyfit(), and sets x[i][j] = i^(j-1), in preparation for polyfit().
    /// @method init
    /// @memberof dfa
    function init() {
        beta = core.matrix(0, 1, nfit)
        covar = core.matrix(0, 1, nfit, 1, nfit)
        covar0 = core.matrix(0, 1, nfit, 1, nfit)
        indxc = core.matrix(0, 1, nfit)
        indxr = core.matrix(0, 1, nfit)
        ipiv = core.matrix(0, 1, nfit)
        mse = core.matrix(0, 1, nr)
        x = core.matrix(0, 1, rs[nr], 1, nfit)

        for (i = 1; i <= rs[nr]; i = i + 1) {
            x[i, 1] = 1.0
            x[i, 2] = i
            for (j = 3; j <= nfit; j = j + 1) {
                x[i, j] = x[i, j - 1] * i
            }
        }
    }

    init()

    ///
    /// Performs the detrended fluctuation analysis.
    /// @method getDfa
    /// @memberof dfa
    /// @param {object}   seq - Input data array.
    /// @param {number}   npts - Number of input points.
    /// @param {number}   nfit - Order of detrending (2: linear, 3: quadratic, etc).
    /// @param {object}   rs - Array of box sizes (uniformly distributed on log scale).
    /// @param {number}   nr - Number of entries in rs[] and mse[].
    /// @param {number}   sw - Mode (0: non-overlapping windows, 1: sliding window).
    /// @return {object}  Returns the mean squared fluctuations in mse.
    ///
    function getDfa(seq, npts, nfit, rs, nr, sw) {
        if (core.type(nfit) == "undefined") {
            nfit = 2
        }
        if (core.type(sw) == "undefined") {
            sw = 0
        }

        for (i = 1; i <= nr; i = i + 1) {
            boxsize = rs[i]
            if (sw) {
                inc = 1
                stat = math.round((npts - boxsize + 1) * boxsize)
            } else {
                inc = boxsize
                stat = math.round((npts / boxsize) * boxsize)
            }
            for (mse[i] = 0.0, j = 0; j <= npts - boxsize; j = j + inc) {
                this.mse[i] = this.mse[i] + this.getPolyfit(this.x, seq + j, boxsize, nfit)
            }
            this.mse[i] = this.mse[i] / stat
        }
    }
}